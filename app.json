[{"name": "app.py", "content": "\nfrom shiny import App, ui, reactive, render\nfrom shiny.ui import HTML\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Movella DOT Data Streaming\"),\n    \n    ui.input_action_button(\"scan\", \"Scan for Bluetooth Devices\"),\n    ui.input_action_button(\"disconnect\", \"Disconnect Device\"),\n    ui.input_action_button(\"start_measurement\", \"Start Measurement\", class_=\"btn-success\"),\n    ui.input_action_button(\"stop_measurement\", \"Stop Measurement\", class_=\"btn-danger\"),\n    ui.br(),\n    ui.br(),\n    ui.output_text(\"connection_status\"),\n    ui.h4(\"Control Characteristic:\"),\n    ui.output_text_verbatim(\"control_data\"),\n    ui.h4(\"Measurement Data:\"),\n    ui.output_text_verbatim(\"raw_data\"),\n    \n    HTML(\"\"\"\n    <script>\n      let bluetoothDevice = null;\n      let notifyCharacteristic = null;\n      let controlCharacteristic = null;\n      let isNotifying = false;\n      \n      async function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n      }\n      \n      async function writeControlCommand(command) {\n        if (!controlCharacteristic) {\n          console.error('Control characteristic not available');\n          return;\n        }\n        try {\n          console.log('Writing command:', command);\n          await controlCharacteristic.writeValue(new Uint8Array(command));\n          console.log('Command written successfully');\n          await sleep(100); // Short delay after writing\n        } catch (error) {\n          console.error('Error writing command:', error);\n        }\n      }\n\n      function handleMeasurementData(event) {\n        console.log('Notification received:', event);\n        try {\n            const value = event.target.value;\n            if (!value) {\n                console.error('No value in event');\n                return;\n            }\n            \n            let uint8Array = new Uint8Array(value.buffer);\n            \n            console.log('Parsed data array:', Array.from(uint8Array));\n            \n            const now = new Date();\n            const timestamp = now.toISOString();\n            \n            const hexData = Array.from(uint8Array).map(b => b.toString(16).padStart(2, '0')).join(' ');\n            const decData = Array.from(uint8Array).join(', ');\n            \n            const dataStr = `Time: ${timestamp}\\nDecimal: ${decData}\\nHex: ${hexData}\\nLength: ${uint8Array.length} bytes`;\n            \n            console.log('Processed data:', dataStr);\n            Shiny.setInputValue('raw_data', dataStr);\n        } catch (e) {\n            console.error('Error processing notification:', e);\n            Shiny.setInputValue('raw_data', 'Error processing data: ' + e.message);\n        }\n      }\n      \n      async function setupNotifications() {\n        if (!notifyCharacteristic) {\n            console.error('Notification characteristic not available');\n            return false;\n        }\n        \n        try {\n            console.log('Starting notifications...');\n            await notifyCharacteristic.startNotifications();\n            console.log('Notifications started');\n            \n            // Add the event listener\n            notifyCharacteristic.addEventListener('characteristicvaluechanged', handleMeasurementData);\n            console.log('Event listener added');\n            \n            isNotifying = true;\n            return true;\n        } catch (error) {\n            console.error('Error in setupNotifications:', error);\n            isNotifying = false;\n            return false;\n        }\n      }\n      \n      // Start measurement button handler\n      document.getElementById('start_measurement').onclick = async function() {\n        if (!controlCharacteristic || !notifyCharacteristic) {\n          console.error('Characteristics not available');\n          Shiny.setInputValue('connection_status', 'Error: Device not properly connected');\n          return;\n        }\n        \n        try {\n          console.log('Setting up notifications...');\n          const notifyResult = await setupNotifications();\n          if (!notifyResult) {\n            console.error('Failed to setup notifications');\n            Shiny.setInputValue('connection_status', 'Error: Failed to setup notifications');\n            return;\n          }\n          \n          await sleep(500); // Wait for notifications to be properly set up\n          \n          console.log('Sending start measurement command...');\n          await writeControlCommand([0x01, 0x01, 0x05]); // Start measurement command with payload mode 0x05 (Quaternion)\n          Shiny.setInputValue('connection_status', 'Measurement started - Waiting for data...');\n          \n        } catch (error) {\n          console.error('Error in start sequence:', error);\n          Shiny.setInputValue('connection_status', 'Error starting measurement: ' + error.message);\n        }\n      };\n      \n      // Stop measurement button handler\n      document.getElementById('stop_measurement').onclick = async function() {\n        if (controlCharacteristic) {\n          console.log('Sending stop measurement command...');\n          await writeControlCommand([0x01, 0x00]); // Stop measurement command\n          \n          if (notifyCharacteristic && isNotifying) {\n            try {\n              notifyCharacteristic.removeEventListener('characteristicvaluechanged', handleMeasurementData);\n              await notifyCharacteristic.stopNotifications();\n              isNotifying = false;\n              console.log('Notifications stopped');\n            } catch (error) {\n              console.error('Error stopping notifications:', error);\n            }\n          }\n          \n          Shiny.setInputValue('connection_status', 'Measurement stopped');\n        }\n      };\n      \n      // Disconnect function\n      document.getElementById('disconnect').onclick = async function() {\n        if (bluetoothDevice && bluetoothDevice.gatt.connected) {\n          if (notifyCharacteristic && isNotifying) {\n            try {\n              await writeControlCommand([0x01, 0x00]); // Stop measurement before disconnecting\n              notifyCharacteristic.removeEventListener('characteristicvaluechanged', handleMeasurementData);\n              await notifyCharacteristic.stopNotifications();\n              isNotifying = false;\n            } catch (error) {\n              console.log('Error in disconnect sequence:', error);\n            }\n          }\n          bluetoothDevice.gatt.disconnect();\n          console.log('Device disconnected');\n          Shiny.setInputValue('connection_status', 'Device disconnected');\n          Shiny.setInputValue('raw_data', 'Disconnected');\n          bluetoothDevice = null;\n          notifyCharacteristic = null;\n          controlCharacteristic = null;\n        }\n      };\n      \n      document.getElementById('scan').onclick = async function() {\n        try {\n          console.log('Starting device scan...');\n          bluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n              { namePrefix: 'Movella' },\n              { namePrefix: 'DOT' },\n              { namePrefix: 'MT' }\n            ],\n            optionalServices: ['15171000-4947-11e9-8646-d663bd873d93', '15172000-4947-11e9-8646-d663bd873d93']\n          });\n          \n          console.log('Device selected:', bluetoothDevice);\n          \n          bluetoothDevice.addEventListener('gattserverdisconnected', () => {\n            console.log('Device disconnected event');\n            Shiny.setInputValue('connection_status', 'Device disconnected');\n            bluetoothDevice = null;\n            notifyCharacteristic = null;\n            controlCharacteristic = null;\n            isNotifying = false;\n          });\n          \n          console.log('Connecting to GATT server...');\n          const server = await bluetoothDevice.gatt.connect();\n          await sleep(500);\n          \n          console.log('Getting primary service...');\n          const service = await server.getPrimaryService('15172000-4947-11e9-8646-d663bd873d93');\n          \n          console.log('Getting characteristics...');\n          controlCharacteristic = await service.getCharacteristic('15172001-4947-11e9-8646-d663bd873d93');\n          console.log('Control characteristic properties:', controlCharacteristic.properties);\n          \n          notifyCharacteristic = await service.getCharacteristic('15172004-4947-11e9-8646-d663bd873d93');\n          console.log('Notify characteristic properties:', notifyCharacteristic.properties);\n          \n          if (controlCharacteristic) {\n            try {\n              const controlValue = await controlCharacteristic.readValue();\n              const controlArray = new Uint8Array(controlValue.buffer);\n              console.log('Initial control value:', Array.from(controlArray));\n              Shiny.setInputValue('control_data', 'Control data: ' + Array.from(controlArray).join(', '));\n            } catch (error) {\n              console.log('Could not read initial control value:', error);\n            }\n          }\n          \n          Shiny.setInputValue('connection_status', 'Connected - Ready to start measurement');\n          \n        } catch (error) {\n          console.error('Error in scan/connect sequence:', error);\n          Shiny.setInputValue('connection_status', 'Error: ' + error.message);\n        }\n      };\n    </script>\n    \"\"\")\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def connection_status():\n        if not hasattr(input, 'connection_status'):\n            return \"Click 'Scan for Bluetooth Devices' to start...\"\n        return input.connection_status()\n    \n    @output\n    @render.text\n    def control_data():\n        if not hasattr(input, 'control_data'):\n            return \"Waiting for control data...\"\n        return input.control_data()\n    \n    @output\n    @render.text\n    def raw_data():\n        if not hasattr(input, 'raw_data'):\n            return \"Waiting for measurement data...\"\n        return input.raw_data()\n\napp = App(app_ui, server)\n", "type": "text"}]